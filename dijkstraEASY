import java.util.*;

public class Dijkstra {
    static int[] dijkstra(int n, List<int[]>[] graph, int src) {
        int[] dist = new int[n]; // shortest distances from src to each node
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[src] = 0;

        // (distance, node)
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.add(new int[]{0, src});

        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int d = curr[0], u = curr[1];
            if (d > dist[u]) continue; // Already found a better way

            for (int[] edge : graph[u]) {
                int v = edge[0], w = edge[1];
                if (dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                    pq.add(new int[]{dist[v], v});
                }
            }
        }
        return dist;
    }

    public static void main(String[] args) {
        int n = 5;
        List<int[]>[] graph = new List[n];
        for (int i = 0; i < n; i++) graph[i] = new ArrayList<>();
        // add edges: from, to, weight
        graph[0].add(new int[]{1, 10});
        graph[0].add(new int[]{4, 5});
        graph[1].add(new int[]{2, 1});
        graph[1].add(new int[]{4, 2});
        graph[2].add(new int[]{3, 4});
        graph[3].add(new int[]{2, 6});
        graph[3].add(new int[]{0, 7});
        graph[4].add(new int[]{1, 3});
        graph[4].add(new int[]{2, 9});
        graph[4].add(new int[]{3, 2});

        int src = 0;
        int[] dist = dijkstra(n, graph, src);
        for (int i = 0; i < n; i++) {
            System.out.println("Distance from " + src + " to " + i + " = " + dist[i]);
        }
    }
}
